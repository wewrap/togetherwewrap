generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(uuid())
  email          String             @unique
  firstName      String
  lastName       String
  password       String?
  birthDate      DateTime?
  googleID       String?            @unique
  salt           String?
  facebookID     String?            @unique
  venmoUrl       String?
  cashappUrl     String?
  paypalUrl      String?
  profile        Profile?
  User           UserRelationship[] @relation("self")
  friendsWith    UserRelationship[] @relation("friendsWith")
  contacts       Contact[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  PlanMembership PlanMembership[]
}

model UserRelationship {
  id                 String             @id @default(uuid())
  User               User               @relation("self", fields: [userID], references: [id])
  userID             String
  friendsWith        User               @relation("friendsWith", fields: [friendsWithID], references: [id])
  friendsWithID      String
  relationshipStatus RelationshipStatus @default(NOT_FRIEND)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

enum RelationshipStatus {
  FRIEND
  PENDING_REQUEST
  NOT_FRIEND
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Profile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userID], references: [id])
  userID    String   @unique
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id               String           @id @default(uuid())
  title            String
  description      String
  startDate        DateTime
  endDate          DateTime
  specialEventType EventType
  stage            PlanStage        @default(BRAINSTORM)
  contactID        String
  contact          Contact          @relation(fields: [contactID], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  PlanMembership   PlanMembership[]
  PlanInvite       PlanInvite[]
}

enum PlanStage {
  BRAINSTORM
  VOTING
  POOL
  PURCHASE
  DELIVERY
  COMPLETED
}

model Contact {
  id                 String                @id @default(uuid())
  email              String?
  firstName          String
  lastName           String?
  phoneNumber        String?
  notes              String?
  source             String?
  ownerID            String
  createdAt          DateTime              @default(now())
  owner              User                  @relation(fields: [ownerID], references: [id])
  importantDateEvent ImportantDateEvent[]
  relationships      ContactRelationship[]
  Plan               Plan[]
}

model Pledge {
  id           String         @id @default(uuid())
  status       PledgeStatus
  pledgeAmount Int
  pledgeDate   DateTime?
  membership   PlanMembership @relation(fields: [membershipID], references: [id])
  membershipID String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ImportantDateEvent {
  id        String  @id @default(uuid())
  contact   Contact @relation(fields: [contactID], references: [id])
  contactID String
  date      String
  eventType String
}

model ContactRelationship {
  id               String  @id @default(uuid())
  contact          Contact @relation(fields: [contactID], references: [id])
  contactID        String
  relationshipType String
}

enum PledgeStatus {
  SENT_MONEY
  HAVENT_SENT_MONEY
}

enum Role {
  PLAN_LEADER
  FRIEND
  SPECIAL_PERSON
}

enum InviteStatus {
  INVITED
  RESENT_INVITE
  ACCEPTED
  DENY
  NOT_APPLICABLE
}

enum EventType {
  BIRTHDAY
  ANNIVERSARY
  GRADUATION
  WEDDING
  BABY_SHOWER
  ACHIEVEMENT
  HOLIDAY
  OTHER
}

model PlanMembership {
  id             String           @id @default(uuid())
  plan           Plan             @relation(fields: [planID], references: [id])
  planID         String
  user           User             @relation(fields: [userID], references: [id])
  userID         String
  Pledge         Pledge[]
  inviteStatus   InviteStatus
  role           Role
  PlanBrainstorm PlanBrainstorm[]
}

model PlanInvite {
  id           String   @id @default(uuid())
  plan         Plan     @relation(fields: [planID], references: [id])
  planID       String
  inviteeEmail String
  expiration   DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PlanBrainstorm {
  id               String         @id @default(uuid())
  planMembership   PlanMembership @relation(fields: [planMembershipID], references: [id])
  planMembershipID String
  description      String
  item             String
  itemLink         String
  voteCount        Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
