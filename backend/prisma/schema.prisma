generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String             @id @default(uuid())
  email       String             @unique
  firstName   String
  lastName    String
  password    String?
  birthDate   DateTime?
  googleID    String?            @unique
  salt        String?
  facebookID  String?            @unique
  venmoUrl    String?
  cashappUrl  String?
  paypalUrl   String?
  profile     Profile?
  contacts    Contact[]
  User        UserRelationship[] @relation("self")
  friendsWith UserRelationship[] @relation("friendsWith")
  Pledge      Pledge[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model UserRelationship {
  id                 String             @id @default(uuid())
  User               User               @relation("self", fields: [userID], references: [id])
  userID             String
  friendsWith        User               @relation("friendsWith", fields: [friendsWithID], references: [id])
  friendsWithID      String
  relationshipStatus RelationshipStatus @default(NOT_FRIEND)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

enum RelationshipStatus {
  FRIEND
  PENDING_REQUEST
  NOT_FRIEND
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Profile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userID], references: [id])
  userID    String   @unique
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id               String       @id @default(uuid())
  description      String
  startDate        DateTime
  endDate          DateTime
  createdDate      DateTime     @default(now())
  specialEventType EventType
  contact          Contact?     @relation(fields: [contactID], references: [id])
  contactID        String?      @unique
  User             Pledge[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  GiftChoice       GiftChoice[]
}

model Pledge {
  id           String        @id @default(uuid())
  plan         Plan          @relation(fields: [planID], references: [id])
  planID       String
  user         User          @relation(fields: [userID], references: [id])
  userID       String
  inviteStatus InviteStatus?
  role         Role
  amount       Int?
  pledgeStatus PledgeStatus?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum PledgeStatus {
  SENT_MONEY
  HAVENT_SENT_MONEY
}

enum Role {
  PLAN_LEADER
  FRIEND
}

enum InviteStatus {
  INVITED
  RESENT_INVITE
  ACCEPTED
  DENY
  NOT_APPLICABLE
}

model Contact {
  id                 String                    @id @default(uuid())
  email              String?
  firstName          String
  notes              String?
  source             String
  owner              User                      @relation(fields: [ownerID], references: [id])
  ownerID            String
  importantDateEvent ImportantDateEvent[]
  relationship       UserContactRelationship[]
  Plan               Plan?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime?                 @updatedAt
}

model ImportantDateEvent {
  id        String   @id @default(uuid())
  contact   Contact  @relation(fields: [contactID], references: [id])
  contactID String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserContactRelationship {
  id        String   @id @default(uuid())
  contact   Contact  @relation(fields: [contactID], references: [id])
  contactID String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GiftChoice {
  id        String   @id @default(uuid())
  Plan      Plan     @relation(fields: [planID], references: [id])
  planID    String
  url       String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Int
}


enum EventType {
  BIRTHDAY
  ANNIVERSARY
  GRADUATION
  WEDDING
  BABYSHOWER
  ACHIEVEMENT
  HOLIDAY
  OTHER
}
